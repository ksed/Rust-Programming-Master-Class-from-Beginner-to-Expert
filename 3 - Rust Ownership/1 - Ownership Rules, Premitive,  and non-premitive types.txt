// -------------------------------------------
// 			Rust Ownership 
// 			- Each value in Rust has a variable thatâ€™s called its owner.
// 			- There can be only one owner at a time.
// 			- When the owner goes out of scope, the value will be dropped.
// -------------------------------------------

fn main() {

	// copy and move
	// move: leads to a change in ownership
	// reference: leads to concept of borrowing
	// copy: leads to two ownerships
	// Primitives vs non-Primitives
	// Primitive examples: Ints, Floats, Boolean, Arrays, Chars
	// non-Primitives examples: vec!, String

	let mut x = 32.6;
	let mut y = x;
	println!("The value of x = {} and the value of y = {}.", x, y);

	let s1 = String::from("abc");
	let s2 = &s1; // The & character tells Rust to borrow a reference to s1
	println!("The value of s1 = {} and s2 = {}.", s1, s2);

	// Vectors
	let num_vec1: Vec<i32> = vec![5, 6, 9, 8, 7];
	// let num_vec2 = num_vec1;                  //move, Ownership change, drops vec1 ownership
	// println!("The first vector is {:?} {:?}.", num_vec1, num_vec2);

	let num_vec2 = &num_vec1;           // Referencing or borrowing
	println!("The values of vec_1 and vec2 with borrowing are {:?} and {:?}.", num_vec1, num_vec2);

	let num_vec2 = num_vec1.clone();
	// clone makes a new copy of vec1 and assigns ownership of the copy of vec1 to vec2.
	println!("The values of vec_1 and vec2 with cloning are {:?} and {:?}.", num_vec1, num_vec2);

	// {
	//     let my_name = String::from("Nouman Azam");
	// }
	// println!("My name is {}", my_name); // my_name doesn't exist out of the scope above

}
