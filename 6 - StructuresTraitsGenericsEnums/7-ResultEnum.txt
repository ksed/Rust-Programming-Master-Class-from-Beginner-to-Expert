// -------------------------------------------
// 			Result enum
//           	- Basic Syntax and usage
// -------------------------------------------

/*
enum Result<T, E> {
    Ok(T),
    Err(E),
}
*/

// Example 1 
/*
fn division(dividend: f64, divisor: f64) -> Result<f64, String> {
    
    /*if divisor == 0.0 {
        Err(String::from("Error: Division By Zero."))
    } else {
        Ok(dividend / divisor)
    }
    */

    match divisor {
        0. => Err(String::from("Error: Division By Zero.")),
        _ => Ok(dividend / divisor),
    }
     
}

fn main() {
    println!("division(9.0, 3.0) = {:?}.", division(9.0, 3.0));
    println!("division(4.0, 0.0) = {:?}.", division(4.0, 0.0));
    println!("division(0.0, 2.0) = {:?}.", division(0.0, 2.0));
} 
*/

// Example 2 

fn main() {
    let get_value = 3;
    let some_vec: Vec<i32> = vec![5, 5, 2, 1, 5, 9];
    let result1 = match some_vec.get(get_value) {
        Some(a) => Ok(a),
        None => Err("The value does not exist in some_vec."),
    };
    println!("The value of Result is {:?}.", result1.unwrap());
}
