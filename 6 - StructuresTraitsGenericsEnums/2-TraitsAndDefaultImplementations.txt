// -------------------------------------------
// 			Traits
//           	- General explanation
// 			    - Default function implementation
// -------------------------------------------

/*

struct Person {
    citizenship: String,
    name: String,
    age: u8,
    gender: char,
    salary: i32,
}

struct Student {
    name_std: String,
    age: u8,
    sex: char,
    country: String,
}

trait GeneralInfo {
    fn info(&self) -> (&str, u8, char);

    // we can have multiple functions inside a trait
    fn country_info(&self) -> &str;
}

impl GeneralInfo for Person {
    fn info(&self) -> (&str, u8, char) {
        (&(self.name), self.age, self.gender)
    }

    fn country_info(&self) -> &str {
        &(self.citizenship)
    }
}

impl GeneralInfo for Student {
    fn info(&self) -> (&str, u8, char) {
        (&(self.name_std), self.age, self.sex)
    }

    fn country_info(&self) -> &str {
        &self.country
    }
}

fn main () {
    let person1 = Person {
        name: String::from("Nouman Azam"),
        citizenship: String::from("Pakistan"),
        age: 40,
        gender: 'M',
        salary: 40_000,
    };

    let student1 = Student {
        name_std: String::from("Affan Azam"),
        age: 15,
        sex: 'M',
        country: String::from("USA"),
    };
    println!("The basic info include {:?}.", person1.info());
    println!("The basic info for the student is {:?}.", student1.info());
}

*/

// Example 2: more on traits and learning about default implementation
struct Circle {
    radius: f32,
}

struct Rectangle {
    width: f32,
    length: f32,
}

trait GeneralInfo {
    fn area(&self) {
        println!("I am not implemented for the type");
    }
    fn perimeter(&self);
}

impl GeneralInfo for Circle {
    fn area(&self) {
        let area = 3.14 * (self.radius * self.radius);
        println!("The area of the circle with radius {} is {}.", self.radius, area);
    }

    fn perimeter(&self)  {
        let circumference = 2.0 * 3.14 * self.radius;
        println!("The circumference of the circle with radius {} is {}.", self.radius, circumference);
    }
}

impl GeneralInfo for Rectangle {
    fn area(&self) {
        let area = self.width * self.length;
        println!("The area of the ({} by {}) rectangle is {}.", self.width, self.length, area);
    }

    fn perimeter(&self) {
        let perimeter = 2.0 * (self.width + self.length);
        println!("The area of the ({} by {}) rectangle is {}.", self.width, self.length, perimeter);
    }
}

fn main() {
    let c1 = Circle {
        radius: 3.2,
    };

    let r1 = Rectangle {
        width: 5.0,
        length: 4.0,
    };

    c1.area();
    c1.perimeter();

    r1.area();
    r1.perimeter();
}
