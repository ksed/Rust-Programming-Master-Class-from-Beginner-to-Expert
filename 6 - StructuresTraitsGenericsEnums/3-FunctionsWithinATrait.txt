// -------------------------------------------
// 			Traits
//           	- General explanation
// 			    - Default function implementation
// 			    - Functions within a trait implementation
// -------------------------------------------

struct Data {
    some_data: Vec<i32>,
}

trait BasicStats {
    fn mean(&self) -> f32;
    fn variance(&self) -> f32;
}

impl BasicStats for Data {
    fn mean(&self) -> f32 {
        let mut sum = 0;
        for i in self.some_data.iter() {
            sum += *i;
        }
        // println!("The sum is {:?}.", sum);
        sum as f32 / self.some_data.len() as f32
    }

    fn variance(&self) -> f32 {
        let mu = self.mean();
        let mut sum_squared_diff: f32 = 0.0;
        for i in self.some_data.iter() {
            sum_squared_diff += square(*i as f32  - mu);
        }
        sum_squared_diff / self.some_data.len() as f32
    }
}

fn square(diff: f32) -> f32 {
    diff * diff
}

fn main() {
    let my_data = Data {
        some_data: vec![5, 6, 9, 8, 7, 4, 8],
    };
    println!("My data is {:?}.", vec![5, 6, 9, 8, 7, 4, 8]);
    println!("The mean of the data is {}.", my_data.mean());
    println!("The variance of the data is {}.", my_data.variance());
}
