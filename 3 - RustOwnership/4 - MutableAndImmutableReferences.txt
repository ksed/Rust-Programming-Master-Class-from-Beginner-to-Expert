fn main() {

    // ------------------------------------------------------------------------
    // 		References Rules  
    //          - One mutable reference in a scope
    //          - Many immutable references are allowed
    //          - Mutable and immutable can not coexist
    //          - Scope of a reference 
    //          - Data should not change when immutable references are in scope 
    // ------------------------------------------------------------------------

    let mut heap_num = vec![4, 5, 6];
    let ref1 = &mut heap_num;
    println!("First mutable reference is {:?}.", ref1);
    // let ref2 = &mut heap_num;
    println!("A 2nd mutable reference is not allowed.");

    let mut heap_num = vec![4, 5, 6];
    let ref1 = &heap_num;
    let ref2 = &heap_num;
    println!("The first immutable reference is {:?}, and the second one is {:?}.", ref1, ref2);

    let mut heap_num = vec![4, 5, 6];
    let ref1 = &heap_num;
    let ref2 = &heap_num;
    println!("Immutable references are {:?} and {:?}.", ref1, ref2);
    // let ref3 = &mut heap_num;
    println!("A mutable reference is not allowed after an immutable references.");

    // Scope, part 1 with mutable and immutable references
    let mut heap_num = vec![4, 5, 6];
    let ref1 = &heap_num;
    let ref2 = &heap_num;
    println!("Immutable references are {:?} and {:?}.", ref1, ref2);
    let ref3 = &mut heap_num;
    println!("Mutable reference {:?} works because the immutable references are out of scope.", ref3);

    // Scope, part 2 with mutable operations and immutable references
    let mut heap_num = vec![4, 5, 6];
    heap_num.push(68);

    let ref1 = &heap_num;
    let ref2 = &heap_num;
    println!("The immutable references are {:?} and {:?}.", ref1, ref2);
    heap_num.push(86);
    println!("The mutable reference is now {:?}, and now falls out of scope.", heap_num);

}
