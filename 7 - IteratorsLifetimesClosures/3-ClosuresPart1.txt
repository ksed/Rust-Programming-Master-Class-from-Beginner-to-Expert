// -------------------------------------------
// 			Closures
//           	- Basic Syntax
//           	- Closure with inputs
//           	- Same variable for different closures
//           	- Ownership and closures
//           	- Inference of the output and inputs
//           	- Passing closure as a function argument
// -------------------------------------------
//  |...| { ... }
/*
fn main() {
    let x = 5;
    let square = || println!("The square of variable x is {}.", x*x);
    square(); 
}
*/


/*
fn main() {
    let x = 5;
    let square = |num: i32| println!("The square of {} is {}.", num, num*num);
    square(x);

    let y = 15;
    square(y);
}
*/

/*
fn main(){
    let x  = 5;
    let square = |num: i32| println!("The square is {}.", num*num);
    let square = |num: i32| println!("The square is {}.", num*num*num);
    square(x);
    let y = 15;
    square(y);
}
*/

/*
fn main() {
    let print_user_age = |general_info: String, name: &str, age| println!("{}\n\t{}: {}", general_info, name, age);
    let general_info = String::from("The details are:");
    let (person_name, person_age) = (String::from("Nouman"), 51);  
    print_user_age(general_info, &person_name, person_age);
    println!("The variable has been moved {}.", person_name);
}
*/

/*
fn main() {
    let square = |num| num*num;
    let x = 5;
    square(x);

    let y = 105.5; 
    square(y);      
}
*/

fn division<F: Fn(f32) -> bool>(x: f32, y: f32, f: F) {
    if f(y) == true {
        println!("The division of {} and {} is {}.", x, y, x/y);
    } else {
        println!("Division of {} and {} is Not Possible.", x, y);
    } 
}

fn main() {
    let division_status = |y: f32| {if y != 0.0 {true} else {false}};
    division(5.0, 10.0, division_status);
    division(54.0, 0.0, division_status); 
}
