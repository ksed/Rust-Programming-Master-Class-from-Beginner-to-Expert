// -------------------------------------------
// 			Iterators
//           	- Basics
//           	- Some useful functions for iterators
//           	- Common statistics
//           	- Modifying and collecting values
// -------------------------------------------

fn main() {
   let a = vec![0, 1, 2, 3, 4, 5, 6, 7];
   println!("The original vec!s (a, b) = {:?}.", a);
   let filtered_values = a.iter().filter(|&x| *x >= 5).collect::<Vec<&u32>>();
   println!("filtered_values (a > 5) = {:?}.", filtered_values);

   let b = a.clone();
   // into_iter() consumes the (a) array rather than returning an array of references.
   let filtered_values= a.into_iter().filter(|x| *x >= 5).collect::<Vec<u32>>();
   println!("filtered_values (a > 5) = {:?}.", filtered_values);

   let mapped_values = b.iter().map(|x| 2 * *x).collect::<Vec<u32>>();
   println!("mapped_values (2b) = {:?}.", mapped_values);

   let mapped_values = b.iter().map(|x| 2 * x).filter(|x| *x > 10).collect::<Vec<u32>>();
   println!("mapped_values (2*b > 10) = {:?}.", mapped_values);

   // https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map
}
